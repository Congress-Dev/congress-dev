# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from congress_api import util
from congress_api.models.base_model_ import Model


class BillSearchListParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chamber=None, versions=None, page=1, page_size=25):  # noqa: E501
        """BillSearchListParams - a model defined in OpenAPI

        :param chamber: The chamber of this BillSearchListParams.  # noqa: E501
        :type chamber: str
        :param versions: The versions of this BillSearchListParams.  # noqa: E501
        :type versions: str
        :param page: The page of this BillSearchListParams.  # noqa: E501
        :type page: int
        :param page_size: The page_size of this BillSearchListParams.  # noqa: E501
        :type page_size: int
        """
        self.openapi_types = {
            "chamber": str,
            "versions": str,
            "page": int,
            "page_size": int,
        }

        self.attribute_map = {
            "chamber": "chamber",
            "versions": "versions",
            "page": "page",
            "page_size": "pageSize",
        }

        self._chamber = chamber
        self._versions = versions
        self._page = page
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt) -> "BillSearchListParams":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BillSearchList_params of this BillSearchListParams.  # noqa: E501
        :rtype: BillSearchListParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chamber(self):
        """Gets the chamber of this BillSearchListParams.


        :return: The chamber of this BillSearchListParams.
        :rtype: str
        """
        return self._chamber

    @chamber.setter
    def chamber(self, chamber):
        """Sets the chamber of this BillSearchListParams.


        :param chamber: The chamber of this BillSearchListParams.
        :type chamber: str
        """

        self._chamber = chamber

    @property
    def versions(self):
        """Gets the versions of this BillSearchListParams.


        :return: The versions of this BillSearchListParams.
        :rtype: str
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this BillSearchListParams.


        :param versions: The versions of this BillSearchListParams.
        :type versions: str
        """

        self._versions = versions

    @property
    def page(self):
        """Gets the page of this BillSearchListParams.


        :return: The page of this BillSearchListParams.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this BillSearchListParams.


        :param page: The page of this BillSearchListParams.
        :type page: int
        """
        if page is not None and page < 0:  # noqa: E501
            raise ValueError(
                "Invalid value for `page`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this BillSearchListParams.


        :return: The page_size of this BillSearchListParams.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this BillSearchListParams.


        :param page_size: The page_size of this BillSearchListParams.
        :type page_size: int
        """
        if page_size is not None and page_size > 25:  # noqa: E501
            raise ValueError(
                "Invalid value for `page_size`, must be a value less than or equal to `25`"
            )  # noqa: E501
        if page_size is not None and page_size < 0:  # noqa: E501
            raise ValueError(
                "Invalid value for `page_size`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._page_size = page_size
